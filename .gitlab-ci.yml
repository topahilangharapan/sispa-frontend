default:
  tags:
    - hostinger

.setup-ssh:
  before_script:
    - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
    - eval $(ssh-agent -s)
    - echo "$DEPLOY_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - echo "Backend URL ${BACKEND_URL}"

stages:
  - build
  - publish
  - deploy
  - clean

variables:
  IMAGE_NAME: topahilangharapan/b01-radiant-fe
  IMAGE_TAG: latest

build:
  image: node:20.11.0-alpine
  stage: build
  only:
    - deployment
  script:
    - echo "Install dependencies and build Vue project"
    - cd /root/$CI_PROJECT_DIR
    - export NVM_DIR="$HOME/.nvm"
    - source "$NVM_DIR/nvm.sh"
    - nvm use 20.11.1
    - node -v
    - npm -v
    - npm install
    - npm run build
  artifacts:
    paths:
      - dist/

login:
  stage: publish
  only:
    - deployment
  script:
    - echo "Login to Docker Hub..."
    - echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

publish:
  image: docker:27.3.1-alpine3.20
  stage: publish
  dependencies:
    - build
  only:
    - deployment
  script:
    - echo "Build Docker image..."
    - cd /root/$CI_PROJECT_DIR
    - docker build -t $IMAGE_NAME:$IMAGE_TAG -f Dockerfile .
    - echo "Push image to registry..."
    - docker push $IMAGE_NAME:$IMAGE_TAG

deploy:
  stage: deploy
  dependencies:
    - publish
  only:
    - deployment
  extends: .setup-ssh
  script:
    - echo "Deploying to Hostinger VPS..."
    - ssh "${DEPLOY_USERNAME}@${DEPLOY_SERVER}" "
      export IMAGE_NAME=${IMAGE_NAME} &&
      cd /root/$CI_PROJECT_DIR &&
      docker compose -f docker-compose-deploy.yml up -d --pull always
      "

cleaning:
  stage: clean
  dependencies:
    - deploy
  only:
    - deployment
  extends: .setup-ssh
  script:
    - echo "Cleaning up old Docker images..."
    - ssh "${DEPLOY_USERNAME}@${DEPLOY_SERVER}" "docker system prune -f"
